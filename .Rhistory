library(readxl)
Mall_Customers_ML_ass1_xls <- read_excel("C:/Users/nihar/Desktop/Mall_Customers ML ass1.xls.csv")
View(Mall_Customers_ML_ass1_xls)
library(readxl)
Mall_Customers <- read_excel("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
View(Mall_Customers)
getwd
getwd()
getwd("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
setwd("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
setwd
setwd(../desktop/Mall_Customers.xlsx)
setwd("")
setwd(dirname(Mall_Customers))
setwd(dirname(/Mall_Customers))
setwd(dirname(,Mall_Customers))
data <- readLines("C:/Users/nihar/Desktop/Mall_Customers.txt")
library(readxl)
Mall_Customers <- read_excel("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
View(Mall_Customers)
summary(mydata)
summary(Mall_Customers)
table(Mall_Customers$Genre)
transform(Mall_Customers, Annual Income = as.integer(Annual Income))
transform.data.frame(Annual Income = as.integer(Annual Income))
transform.data.frame(Mall_Customers, Annual Income = as.integer(Annual Income))
transform.data.frame(Mall_Customers, Annual.Income = as.integer(Annual.Income))
transform.data.frame(Annual Income = as.integer(Annual Income))
transform(Annual Income = as.integer(Annual Income))
attach(Mall_Customers)
plot(Age, `Annual Income`, main = "scatterPlot", xlab = "Age", ylab = "Annual Income in K$")
transform(Mall_Customers, Annual Income = as.integer(Annual Income))
library(readxl)
UniversalBank_1_ <- read_excel("C:/Users/nihar/Downloads/UniversalBank (1).csv")
View(UniversalBank_1_)
library(readxl)
UniversalBank <- read_excel("C:/Users/nihar/Desktop/Assignment/ML/Assignment 2/UniversalBank.xlsx")
View(UniversalBank)
library(class, lib.loc = "C:/Program Files/R/R-4.0.3/library")
install.packages(c("caret", "dplyr", "e1071", "FNN", "gmodels", "psych"))
View(UniversalBank)
UniversalBank <- data
setwd("C:/Users/nihar/Desktop")
UBCustomer<- read.csv("UniversalBank.CSV", header = TRUE)
str(UBCustomer)
#Excluding the ID and ZIP Code columns using subset
UBCust<- UBCustomer[-c(1,5)]
library(dplyr)
library(fastDummies)
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select = (-personal.loan))
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select(-personal.loan))
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select = (-personal.loan))
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select(-personal.loan))
summary(UBCust)
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select(-personal.loan))
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select(-Personal.Loan))
UBCustomer_dummy <- dummy_cols(UBCustomer %>% select_columns = (-Personal.Loan))
UBCustomer_dummy<- dummy_cols(UBCustomer, select_columns = c("Education"))
UBCustomer_dummy<- UBCustomer_dummy %>% select(-Education) %>% mutate(Personal.Loan = UBCustomer$Personal.Loan)
summary(UBCustomer_dummy)
#to check null values present
apply(UBCustomer,2,function(x){any(is.na(x))})
library(dplyr)
set.seed(15)
# dividing the data between training(60) and validation(40) sets
library(caret)
UBCustomer_datapartition_train <- createDataPartition(UBCustomer_dummy$Personal.Loan, p=0.6, list = FALSE)
UBCustomer_train <- UBCustomer_dummy[UBCustomer_datapartition_train,]
UBCustomer_Valid <- UBCustomer_dummy[-UBCustomer_datapartition_train,]
UBCustomer_datapartition_test <- createDataPartition(UBCustomer_dummy$Personal.Loan, p=0.4, list = FALSE)
UBCustomer_train_test <- UBCustomer_dummy[UBCustomer_datapartition_test,]
UBCustomer_Valid_test <- UBCustomer_dummy[-UBCustomer_datapartition_test,]
#checking summary
summary(UBCustomer_train)
summary(UBCustomer_Valid)
summary(UBCustomer_train_test)
#Normalizing numeric data
train.norm.df <-UBCustomer_train
Valid.norm.df <-UBCustomer_Valid
train.norm.test.df<- UBCustomer_Valid_test
#preprocess is a caret data helps in tranformation on a training data which can be applied to test data
norm.values<-preProcess(UBCustomer_train[, 1:12], method = c("center", "scale"))
train.norm.df[, 1:13]<- predict(norm.values,UBCustomer_train[, 1:13])#normalizing 13 columns
Valid.norm.df[, 1:13]<- predict(norm.values,UBCustomer_Valid[, 1:13])
train.norm.test.df[, 1:13]<- predict(norm.values,UBCustomer_Valid_test[, 1:13])
test.norm.df <-predict(norm.values,UBCustomer_train_test[, 1:13])
summary(train.norm.df)
var(train.norm.df[, 1:13])
summary(Valid.norm.df)
var(Valid.norm.df[, 1:13])
# performing K = 1
library(FNN)
library(class)
library(gmodels)
KNN_test<- knn(train.norm.df[, 1:13], test.norm.df, cl = train.norm.df[, 3], k=1, prob = TRUE)
summary(KNN_test)
row.names(UBCustomer_train)[attr(KNN_test,"KNN_test.index")]
#cross table
Test <- UBCustomer_train_test$Personal.Loan
predicted <- KNN_test
CrossTable(x=Test, y =KNN_test, prop.chisq = FALSE)
library(caret)
accuracy.df <- data.frame(k = seq(1, 14, 1), accuracy = rep(0, 14))
# compute knn for different k on validation.
for(i in 1:14) {
knn.pred <- knn(train.norm.df[, 1:13], valid.norm.df[, 1:13], cl = train.norm.df[, 3], k = i)
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df)$overall[1]
}
accuracy.df
#prediction for choice of k
library(caret)
norm.values <- preProcess(UBCustomer_Valid_test[, 1:13], method = c("center", "scale"))
train.norm.test.df[, 1:13] <- predict(norm.values, UBCustomer_Valid_test[, 1:13] )
test.norm.df[, 1:13]<- predict(norm.values,UBCustomer_train_test[, 1:13])
summary(train.norm.test.df)
summary(test.norm.df)
knn.new <- knn(train.norm.test.df[, 1:13],test.norm.df, cl = train.norm.test.df[, 3], k = 7 )
UBCustomer2 <- createDataPartition(UBCustomer_dummy$Personal.Loan, p=0.5, list = FALSE)
UBCustomer2_train_df <- UBCustomer_dummy[UBCustomer2,]
UBCustomer2_test_df<- UBCustomer_dummy[-UBCustomer2,]
UBCustomer2_valid <- createDataPartition(UBCustomer2_test_df$Personal.Loan, p=0.6, list = FALSE)
UBCustomer2_v.train_df <- UBCustomer2_test_df[UBCustomer2_valid,]
UBCustomer2_v.test_df<- UBCustomer2_test_df[-UBCustomer2_valid,]
#Installing the caret library
library(caret)
train2.norm.df<- UBCustomer2_train_df
valid2.norm.df<- UBCustomer2_test_df
traval2.norm.df<- UBCustomer2_v.test_df
#normalizing the values
norm.values<- preProcess(UBCustomer2_train_df[, 1:13], method=c("center", "scale"))
train2.norm.df[, 1:13]<- predict(norm.values,UBCustomer2_train_df[, 1:13] )#normalizing 13 columns for 2nd partition before running KNN
traval2.norm.df[, 1:13]<- predict(norm.values,UBCustomer2_v.test_df[, 1:13] )
valid2.norm.df[, 1:13]<- predict(norm.values,UBCustomer2_test_df[, 1:13] )
test2.norm.df<- predict(norm.values, UBCustomer2_v.train_df[, 1:13])
traval2.norm.df[, 1:13]<- predict(norm.values,UBCustomer2_v.test_df[, 1:13] )
summary(train2.norm.df)
var(train2.norm.df[, 1:13])
var(train2.norm.df[, 1:2])
#DataModeling with best model is k = 4
KNN2 <- knn(train = train2.norm.df[, 1:13], test = test2.norm.df, cl=train2.norm.df$Personal.Loan, k=4, prob = TRUE)
#performing crosstable for KNN2
library(gmodels)
Test_label <- UBCustomer2_v.train_df$Personal.Loan
predicted_label <- KNN2
CrossTable(x=Test_label, y =KNN2, prop.chisq = FALSE)
Sample1 <- data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2,
Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1, Education_1 = 0, Education_2 = 1,Education_3 = 0)
KNN_test_sample<- knn(train.norm.df[, 1:13], Sample1, cl = train.norm.df[, 3], k=1, prob = TRUE)
KNN_test4<- knn(train.norm.df[, 1:13], test.norm.df, cl = train.norm.df[, 3], k=4, prob = TRUE)
KNN_test_sample<- knn(train.norm.df[, 1:13], Sample, cl = train.norm.df[, 3], k=1, prob = TRUE)
Sample <- data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2,
Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1, Education_1 = 0, Education_2 = 1,Education_3 = 0)
KNN_test_sample<- knn(train.norm.df[, 1:13], Sample, cl = train.norm.df[, 3], k=1, prob = TRUE)
KNN_test<- knn(train.norm.df[, 1:13], test.norm.df, cl = train.norm.df[, 3], k=1, prob = TRUE)
KNN_test4<- knn(train.norm.df[, 1:13], test.norm.df, cl = train.norm.df[, 3], k=4, prob = TRUE)
summary(KNN_test)
row.names(UBCustomer_train)[attr(KNN_test,"KNN_test.index")]
#cross table
Test <- UBCustomer_train_test$Personal.Loan
predicted <- KNN_test_sample
CrossTable(x=Test, y =KNN_test_sample, prop.chisq = FALSE)
#cross table
Test <- UBCustomer_train_test$Personal.Loan
predicted <- KNN_test
CrossTable(x=Test, y =KNN_test, prop.chisq = FALSE)
#cross table
Test <- UBCustomer_train_test$Personal.Loan
predicted <- KNN_test_sample
CrossTable(x=Test, y =KNN_test_sample, prop.chisq = FALSE)
#cross table
Test <- test.norm.df
predicted <- KNN_test_sample
CrossTable(x=Test, y =KNN_test_sample, prop.chisq = FALSE)
#cross table
Test <- UBCustomer_train_test
predicted <- KNN_test_sample
CrossTable(x=Test, y =KNN_test_sample, prop.chisq = FALSE)
#choice of k
accuracy.df <- data.frame(k = seq(1,20,1), accuracy = rep(0,20))
for(i in 1:20){
knn.pred <- knn(train.norm.df, valid.norm.df, cl = train.norm.df$`Personal Loan`, k=i)
accuracy.df[i,2] <- confusionMatrix(knn.pred, train.norm.df$`Personal Loan`)$overall[1]
}
Valid.norm.df <-UBCustomer_Valid
knn.pred <- knn(train.norm.df, valid.norm.df, cl = train.norm.df$`Personal Loan`, k=i)
knn.pred <- knn(train.norm.df, test.norm.df, cl = train.norm.df$`Personal Loan`, k=i)
#choice of k
accuracy.df <- data.frame(k = seq(1,20,1), accuracy = rep(0,20))
for(i in 1:20){
knn.pred <- knn(train.norm.df[ ,1:13], Valid.norm.df[, 1:13], cl = train.norm.df$`Personal Loan`, k=i)
accuracy.df[i,2] <- confusionMatrix(knn.pred, train.norm.df$`Personal Loan`)$overall[1]
}
knn.pred <- knn(train.norm.df[ ,1:13], Valid.norm.df[, 1:13], cl = train.norm.df, k=i)
