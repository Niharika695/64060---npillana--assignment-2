library(readxl)
Mall_Customers_ML_ass1_xls <- read_excel("C:/Users/nihar/Desktop/Mall_Customers ML ass1.xls.csv")
View(Mall_Customers_ML_ass1_xls)
library(readxl)
Mall_Customers <- read_excel("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
View(Mall_Customers)
getwd
getwd()
getwd("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
setwd("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
setwd
setwd(../desktop/Mall_Customers.xlsx)
setwd("")
setwd(dirname(Mall_Customers))
setwd(dirname(/Mall_Customers))
setwd(dirname(,Mall_Customers))
data <- readLines("C:/Users/nihar/Desktop/Mall_Customers.txt")
library(readxl)
Mall_Customers <- read_excel("C:/Users/nihar/Desktop/Mall_Customers.xlsx")
View(Mall_Customers)
summary(mydata)
summary(Mall_Customers)
table(Mall_Customers$Genre)
transform(Mall_Customers, Annual Income = as.integer(Annual Income))
transform.data.frame(Annual Income = as.integer(Annual Income))
transform.data.frame(Mall_Customers, Annual Income = as.integer(Annual Income))
transform.data.frame(Mall_Customers, Annual.Income = as.integer(Annual.Income))
transform.data.frame(Annual Income = as.integer(Annual Income))
transform(Annual Income = as.integer(Annual Income))
attach(Mall_Customers)
plot(Age, `Annual Income`, main = "scatterPlot", xlab = "Age", ylab = "Annual Income in K$")
transform(Mall_Customers, Annual Income = as.integer(Annual Income))
library(readxl)
UniversalBank_1_ <- read_excel("C:/Users/nihar/Downloads/UniversalBank (1).csv")
View(UniversalBank_1_)
library(readxl)
UniversalBank <- read_excel("C:/Users/nihar/Desktop/Assignment/ML/Assignment 2/UniversalBank.xlsx")
View(UniversalBank)
library(class, lib.loc = "C:/Program Files/R/R-4.0.3/library")
install.packages(c("caret", "dplyr", "e1071", "FNN", "gmodels", "psych"))
View(UniversalBank)
UniversalBank <- data
df=data.frame(x=c(1,2,3),x2=c(0,1,5),y=c(3,6,7))
df %>% filter(x>1 & y<7) %>% select(x2,y)
library(dplyr)
df=data.frame(x=c(1,2,3),x2=c(0,1,5),y=c(3,6,7))
df %>% filter(x>1 & y<7) %>% select(x2,y)
library(dplyr)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(e1071)
library(caret)
library(gmodels)
library(reshape2)
setwd("C:/Users/nihar/Desktop")
UniversalBank<- read.csv("UniversalBank.csv", header = TRUE)
head(UniversalBank)
#partitioning data between training set and validation set
set.seed(15)
split<- createDataPartition(UniversalBank$Personal.Loan, p=0.6, list = FALSE)
train<- UniversalBank[1:3000, ]
Valid<- UniversalBank[3001:5000, ]
train
NROW(train)
NROW(Valid)
table(train$Personal.Loan) %>% prop.table()
table(Valid$Personal.Loan) %>% prop.table()
#Feature Scaling
train_scale<- scale(train[,1:14])
Valid_scale<- scale(Valid[,1:14])
Melt.UBbank<- melt(train, id=c("CreditCard","Personal.Loan"), variable = "Online")
cast.UBbank=dcast(Melt.train, CreditCard+Personal.Loan~Online)
cast.UBbank[,c(1:2,14)]
Melt.UBbank<- melt(train, id=c("CreditCard","Personal.Loan"), variable = "Online")
cast.UBbank<-dcast(Melt.train, CreditCard+Personal.Loan~Online)
cast.UBbank<-dcast(Melt.UBbank, CreditCard+Personal.Loan~Online)
cast.UBbank[,c(1:2,14)]
#b)This is the probability of loan acceptance (Loan = 1) conditional on having a bank credit card (CC = 1) and being an active user of online banking services (Online = 1)
# is 54/(54+477)= 54/531 = 0.101
table(train[,c(13,14,10)])
Melt.UBbankc1 = melt(train, id=c("Personal.Loan"), variable = "Online") # Loan (rows) as a function of Online (columns)
Melt.UBbankc2 = melt(train, id=c("Personal.Loan"), variable = "CreditCard") # Loan (rows) as a function of CC
recast.UBbankc1=dcast(Melt.UBbankc1, Personal.Loan~Online) #cast the melted data
recast.UBbankc2=dcast(Melt.UBbankc2, Personal.Loan~CreditCard)
Loanline<-recast.UBbankc1[,c(1,13)]
LoanCC<-recast.UBbankc2[,c(1,14)]
table(train[,c(14,10)])#credit card against personal.loan
table(train[,c(13,10)])
table(train[,c(13,14)])#online against personal.loan
table(train[,c(10)])#personal.loan
NB_model<- naiveBayes(Personal.Loan ~ Online+CreditCard, data = train)
NB_model
#predicting test data
Pred_test<- predict(NB_model,Valid)
#creating confusion Matrix
CM<- table(Valid$Personal.Loan, Pred_test)
#predicting test data
Pred_test<- predict(NB_model,Valid)
Pred_test
CrossTable(x=Valid$Personal.Loan, y=Pred_test, prop.chisq = FALSE)
#predicting test data
Pred_test<- predict(NB_model,train)
Pred_test
CrossTable(NB_model, Pred_test$Personal.Loan,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('Online', 'CreditCard'))
CM<-CrossTable(NB_model, Pred_test,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('Online', 'CreditCard'))
#predicting test data
Pred_test<- predict(NB_model,Valid_scale)
Pred_test
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid_scale)
Pred_test
#creating confusion Matrix
CM<- table(Valid_scale$Personal.Loan, Pred_test)
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid)
#creating confusion Matrix
CM<- table(Valid$Personal.Loan, Pred_test)
#fitting Naive Bayes Model
set.seed(120)
NB_model<- naiveBayes(Personal.Loan ~ Online+CreditCard, data = train)
NB_model
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid)
Pred_test
summary(Pred_test)
table(Pred_test)
#creating confusion Matrix
CM<- table(Valid$Personal.Loan, Pred_test)
#creating confusion Matrix
CM<- table(Valid, Pred_test)
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid$Personal.Loan)
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid)
#creating confusion Matrix
CM<- table(Valid$Personal.Loan, Pred_test)
#creating confusion Matrix
CM<- table(Valid, Pred_test)
Valid$Personal.Loan
NB_model<- naiveBayes(Personal.Loan ~ ., data = train)
NB_model
#predicting test data
Pred_test<- predict(NB_model,newdata = Valid)
#creating confusion Matrix
CM<- table(Valid$Personal.Loan, Pred_test)
#creating confusion Matrix
CM<- confusionMatrix(Valid$Personal.Loan, Pred_test)
#creating confusion Matrix
CM<- confusionMatrix(Valid$Personal.Loan, Pred_test, prop.chisq = FALSE, prop.t = FALSE, dnn = c('Online','CreditCard'))
#creating confusion Matrix
CM<- confusionMatrix(Valid, Pred_test, prop.chisq = FALSE, prop.t = FALSE, dnn = c('Online','CreditCard'))
Pred_test<- as.factor(Pred_test)
NB_model<-as.factor(NB_model)
#creating confusion Matrix
CM<- confusionMatrix(Valid, Pred_test, prop.chisq = FALSE, prop.t = FALSE, dnn = c('Online','CreditCard'))
NB_model<- naiveBayes(Personal.Loan ~ ., data = train)
NB_model
source('C:/Users/nihar/Desktop/Assignment/ML/Assignment 3/Assignment3-NB.R', echo=TRUE)
install.packages("tidyverse")
source('C:/Users/nihar/Desktop/Assignment/ML/Assignment 3/Assignment3-NB.R', echo=TRUE)
Melt.UBbankc1
Melt.UBbankc1 = melt(train, id=c("Online"), variable = "Personal.Loan") # Loan (rows) as a function of Online (columns)
recast.UBbankc1=dcast(Melt.UBbankc1, Online~Personal.Loan) #cast the melted data
1
Loanline<-recast.UBbankc1[,c(13,1)]
Loanline
Loanline<-recast.UBbankc1[,c(1,13)]
a
Loanline
table(train[,c(13,14)])#online against personal.loan
table(train[,c(13,10)])
table(train[,c(14,10)])#credit card against personal.loan
Melt.UBbankc1 = melt(train, id=c("Online"), variable = "Personal.Loan") # Loan (rows) as a function of Online (columns)
Melt.UBbankc2 = melt(train, id=c("CreditCard"), variable = "Personal.Loan") # Loan (rows) as a function of CC
Melt.UBbankc1 = melt(train, id=c("Online"), variable = "Personal.Loan") # Loan (rows) as a function of Online (columns)
Melt.UBbankc2 = melt(train, id=c("CreditCard"), variable = "Personal.Loan") # Loan (rows) as a function of CC
recast.UBbankc1=dcast(Melt.UBbankc1, Online~Personal.Loan) #cast the melted data
recast.UBbankc2=dcast(Melt.UBbankc2, CreditCard~Personal.Loan)
Loanline<-recast.UBbankc1[,c(10,13)]
LoanCC<-recast.UBbankc2[,c(10,14)]
Loanline
LoanCC
recast.UBbankc1=dcast(Melt.UBbankc1, Online~Personal.Loan) #cast the melted data
recast.UBbankc2=dcast(Melt.UBbankc2, CreditCard~Personal.Loan)
table(train[,c(14,10)])#credit card against personal.loan
table(train[,c(13,10)])
source('C:/Users/nihar/Desktop/Assignment/ML/Assignment 3/Assignment3-NB.R', echo=TRUE)
